<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yjxg.github.io</id>
    <title>许戈的第一个网站</title>
    <updated>2022-04-26T10:11:47.644Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yjxg.github.io"/>
    <link rel="self" href="https://yjxg.github.io/atom.xml"/>
    <subtitle>阳光，快乐的生活着！</subtitle>
    <logo>https://yjxg.github.io/images/avatar.png</logo>
    <icon>https://yjxg.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 许戈的第一个网站</rights>
    <entry>
        <title type="html"><![CDATA[编程算法——冒泡法]]></title>
        <id>https://yjxg.github.io/post/a9qLa_Zor/</id>
        <link href="https://yjxg.github.io/post/a9qLa_Zor/">
        </link>
        <updated>2022-04-26T09:58:43.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>💻编程算法——冒泡法（全文都是按照从小到大的思想进行说明）</p>
<!-- more -->
<p>冒泡法，顾名思义有气泡上浮冒出水面的意思。冒泡法的核心思想就是通过连续相邻两个数的比较，从而使较大的数下沉或者较小的数上浮，通俗的讲，就是通过不断地比较而交换位置。而冒泡法主要用在排序问题中。如果有n个数进行排序，冒泡法将是不二的选择，通过n-1轮比较，从第一轮开始依次相邻的两个数比较并交换位置。第一轮过后，将会得出最大的数排列到了最后，所以，第二轮比较的时候，就不用在与最大的数进行比较，从而又减少了一次相邻的数比较的次数，按照这种方法依次进行，最终将会得到一个从小到大排列的序列。</p>
<!-- more -->
<p><img src="https://yjxg.github.io/post-images/1650967639525.jpg" alt="" loading="lazy"><br>
🔍典型例子：</p>
<!-- more -->
<p>假设n个同学站成一队，要求根据他们的身高（单位为cm）从低到高进行排列。</p>
<!-- more -->
<p>🖊问题分析：</p>
<!-- more -->
<p>首先将学生的身高存放在数组中，这个问题将转换为数组元素排序问题。排序问题可以采用冒泡法，冒泡法在这个问题中的基本思想是：从队列的最前面开始检查，比较相邻两个学生的身高，若个子高的学生在前，个子矮的学生在后，则需要交换他们的位置，当检查到队列的最后一个学生的时候，个子最高的同学已经被排到了队尾，这也就完成了第一轮的调整，处理第二轮时，任然从队列的最前面开始检查，意志检查到倒数第二位同学（因为身高最高的那位同学已经在第一轮中被排到了队尾），按照这样的循环，一次执行n-1次结束。</p>
<!-- more -->
<p>⌨️程序代码：<br>
（1、用c语言实现）：<br>
#include &lt;stdio.h&gt;<br>
main ()<br>
{<br>
printf(&quot;please input a number :\n&quot;);<br>
int height[1000],n,TS;<br>
scanf(&quot;%d&quot;,&amp;n);<br>
printf(&quot;please input the height of every students :\n&quot;);<br>
for(int i=0;i&lt;n;i++)<br>
scanf(&quot;%d&quot;,&amp;height[i]);<br>
for(int i=1;i&lt;n-1;i++)<br>
{<br>
for(int j=0;j&lt;n-i;j++)<br>
{<br>
if(height[j]&gt;height[j+1])<br>
{<br>
TS=height[j];<br>
height[j]=height[j+1];<br>
height[j+1]=TS;<br>
}<br>
}<br>
}<br>
for(int i=0;i&lt;n;i++)<br>
printf(&quot;%5d&quot;,height[i]);<br>
return 0;<br>
}</p>
<!-- more -->
<p>（用java语言实现）<br>
//假设n个同学站成一排，要求根据他们的身高（单位：cm）从低到高进行排列；<br>
import java.util.Scanner;<br>
public class helloworld{<br>
public static void main (String[] args){<br>
System.out.println(&quot;请输入共有多少个学生：&quot;);<br>
Scanner sc = new Scanner(System.in);<br>
int n = sc.nextInt();<br>
//因为学生的身高是浮点型数据，所以要浮点型定义；<br>
double[] height = new double[n];<br>
System.out.println(&quot;请输入每个同学的身高：&quot;);<br>
//录入学生的身高；<br>
for(int i = 0;i&lt; n ;i++) {<br>
height[i] = sc.nextDouble();<br>
}<br>
//用冒泡法将数据进行排序；<br>
//第一个for循环：总共比较n-1轮；<br>
for(int i = 1;i &lt; n;i++){<br>
for(int j = 0;j&lt;n-i;j++){<br>
if(height[j]&gt;height[j+1]){<br>
//定义一个交换变量；<br>
double TS = height[j];<br>
height[j] = height[j+1];<br>
height[j+1] = TS;</p>
<pre><code>            }
        }
    }
    for(int i=0;i&lt;n;i++){
        System.out.println(height[i]);
    }

}
</code></pre>
<p>}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[编程算法——穷举法]]></title>
        <id>https://yjxg.github.io/post/bian-cheng-suan-fa-qiong-ju-fa/</id>
        <link href="https://yjxg.github.io/post/bian-cheng-suan-fa-qiong-ju-fa/">
        </link>
        <updated>2022-04-24T08:54:29.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<!-- more -->
<p>穷举法的整体思路还是比较容易理解的，总体来说就是让某个未知量从零开始，通过整体的公式或者方程，让其未知量的值从0递增或从某个值递减从而来判断其公式或着方程是否符合条件，从而解出方程，获得方程的解。</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://yjxg.github.io/post-images/1650791008187.jpg" alt="" loading="lazy"></figure>
<!-- more -->
<p>典型例子：<br>
鸡兔同笼问题：鸡兔同笼问题是中国古代的数学名题之一，大约在1500年前，《孙子算经》中就记载了这个有趣的问题，书中是这样说的：今有雉兔同笼，上有三十五头，下有九十四足，问雉各几何？这句话的意思是：有若干只鸡和兔字被关在同一个笼子里，从上面数，有35个头，从下面数，有94只脚，问笼中各有几只鸡和兔？</p>
<!-- more -->
<p>问题分析：<br>
鸡兔同笼问题，如果用传统的数学方法来解决也确实不难，就是列举两个简单的一元二次方程就能算出鸡兔各多少只。但是如果要用计算机编程来解决这样的问题，用到的思路就是穷举法，即让鸡的数量x从0开始逐渐递增到总35，则兔子的数量就是35-x，然后根据：<br>
2*x+（35-x）=94这个关系式的值是否为真来判断是否符合条件，如果是，则输出鸡和兔子的数量。</p>
<!-- more -->
<p>程序代码：<br>
#include &lt;stdio.h&gt;<br>
int main (void) {<br>
printf(&quot;Here is the output :\n&quot;);<br>
int chick, rabbit;<br>
for (chick = 0; chick &lt;= 35; chick++) {<br>
rabbit = 35 - chick;<br>
if (2 * chick + 4 * rabbit == 94)<br>
printf(&quot;chick=%d,rabbit=%d&quot;, chick, rabbit);<br>
}<br>
return 0;<br>
}</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World !]]></title>
        <id>https://yjxg.github.io/post/hello-world/</id>
        <link href="https://yjxg.github.io/post/hello-world/">
        </link>
        <updated>2022-04-24T05:46:40.000Z</updated>
        <content type="html"><![CDATA[<p>你好，世界！<br>
<img src="https://yjxg.github.io/post-images/1650782913977.jpg" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>